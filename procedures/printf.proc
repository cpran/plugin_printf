include ../../plugin_varargs/procedures/varargs.proc
include ../../plugin_utils/procedures/utils.proc
include ../../plugin_utils/procedures/base_conversions.proc
include ../../plugin_utils/procedures/try.proc

include ../../plugin_utils/procedures/trace.proc
trace.enable = 0

if !variableExists("printf.system")
  call try
    ... null$ = if windows then "NUL" else "/dev/null" fi     \n
    ... runSystem: "perl -v 2 > ", null$

  if try.catch
    printf.system = 0
  else
    @trace: "Using perl printf"
    printf.system = 1
  endif
endif

procedure printf ()
  if printf.system
    .cmd$ = ""
    for .i to .argn
      .cmd$ = .cmd$ + """ """"" + .argv$[.i] + """"" "", "
    endfor
    .cmd$ = .cmd$ - ", "

    runSystem: "perl ",
      ... preferencesDirectory$ + "/plugin_printf/scripts/printf.pl ", '.cmd$'
  else
    for .i to .argn
      sprintf.argv$[.i] = .argv$[.i]
    endfor
    sprintf.argn = .argn

    @sprintf()

    appendInfo: sprintf.return$
  endif
endproc

procedure fprintf ()
  if printf.system
    .cmd$ = ""
    for .i to .argn
      .cmd$ = .cmd$ + """ """"" + .argv$[.i] + """"" "", "
    endfor
    .cmd$ = .cmd$ - ", "

    runSystem: "perl ",
      ... preferencesDirectory$ + "/plugin_printf/scripts/fprintf.pl ", '.cmd$'
  else
    for .i from 2 to .argn
      sprintf.argv$[.i - 1] = .argv$[.i]
    endfor
    sprintf.argn = .argn - 1

    @sprintf()

    appendFile: .argv$[1], sprintf.return$
  endif
endproc

procedure sprintf ()
  if printf.system
    .cmd$ = ""
    for .i to .argn
      .cmd$ = .cmd$ + """ """"" + .argv$[.i] + """"" "", "
    endfor
    .cmd$ = .cmd$ - ", "

    @mktempfile: "printfXXXXXXXX", "txt"
    runSystem: "perl ",
      ... preferencesDirectory$ + "/plugin_printf/scripts/fprintf.pl ",
      ... mktempfile.return$, '.cmd$'

    .return$ = readFile$(mktempfile.return$)
    deleteFile(mktempfile.return$)
  else
    if .argn < 1
      exitScript: "sprintf called with no arguments"
    endif

    #           Escape Index      Flag       Width       Precision       Length           Specifier
    .regex$ = "((?<!%)%([0-9]+\$)?([ 0#+-]+)?([0-9]+|\*)?(\.([0-9]*|\*))?(hh?|ll?|[jztL])?([bBdiouxXfFeEgGaAsn]))"
    .unsigned$ = "bouxX"
    .integers$ = .unsigned$ + "id"
    .doubles$  = "eEfF"

    @trace: "Formatting """ + .argv$[1] + """"
    .todo$ = .argv$[1]
    .return$ = ""

    .i = 1
    .failsafe = 0
    repeat
      .failsafe += 1

      .prototype = index_regex(.todo$, .regex$)
      if .prototype
        .clear$ = left$(.todo$, .prototype - 1)
        .todo$  = right$(.todo$, length(.todo$) - .prototype + 1)
      else
        .clear$ = .todo$
        .todo$  = ""
      endif

      .clear$ = replace$(.clear$, "%%", "%", 0)
      .clear$ = replace_regex$(.clear$, "(?<!\\)\\t", tab$, 0)
      .clear$ = replace_regex$(.clear$, "(?<!\\)\\n", newline$, 0)
      .clear$ = replace_regex$(.clear$, "\\\\", "\", 0)
      .return$ = .return$ + .clear$

      if .todo$ != ""
        @_printf_parse: .todo$
        @_printf_replace: .flag$, .width, .precision, .length$, .specifier$, .argv$[.index]
        .return$ = .return$ + "'_printf_replace.return$'"
        .todo$ = right$(.todo$, length(.todo$) - length(sprintf.full$))
      endif
    until .todo$ == "" or .failsafe > 1000

    @trace: "Full result: """ + .return$ + """"
  endif
endproc

procedure _printf_parse: .todo$
  .spec$ = replace_regex$(.todo$,
    ... sprintf.regex$ + ".*", "\1|\2|\3|\4|\5|\7|\8", 1)

  for .i to 7
    split.return$[.i] = ""
  endfor

  @split: "|", .spec$
  sprintf.full$      = split.return$[1]
  sprintf.index$     = split.return$[2]
  sprintf.flag$      = split.return$[3]
  sprintf.width$     = split.return$[4]
  sprintf.precision$ = split.return$[5]
  sprintf.length$    = split.return$[6]
  sprintf.specifier$ = split.return$[7]

  if index(sprintf.width$, "*")
    sprintf.i += 1
    sprintf.width$ = sprintf.argv$[sprintf.i]

    .w = number(sprintf.width$)
    if .w != undefined and .w < 0
      sprintf.flag$ = sprintf.flag$ + "-"
      sprintf.width$ = string$(.w * -1)
    endif
  endif

  if index(sprintf.precision$, "*")
    sprintf.i += 1
    sprintf.precision$ = sprintf.argv$[sprintf.i]

    .p = number(sprintf.precision$)
    if .p != undefined and .p < 0
      sprintf.precision$ = 0
    endif
    sprintf.precision$ = "." + sprintf.precision$
  endif

  # If the period is specified without an explicit value for precision,
  # 0 is assumed.
  if sprintf.precision$ == "."
    sprintf.precision = 0
  else
    sprintf.precision = extractNumber(sprintf.precision$, ".")
  endif

  if sprintf.specifier$ !="s" and sprintf.precision == undefined
    sprintf.precision = 6
  endif

  sprintf.width = number(sprintf.width$)

  if sprintf.index$ != ""
    sprintf.index = number(sprintf.index$) + 1
  else
    sprintf.i += 1
    sprintf.index = sprintf.i
  endif
  @trace: "Fetching argument at position " + string$(sprintf.index)

  if sprintf.index > sprintf.argn
    exitScript: "Not enough arguments for format string"
  endif
endproc

procedure _printf_replace: .flag$, .width, .precision, .length$, .specifier$, .arg$

  .done = 0

  # With integers, specifying precision discards the 0 flag
  if index(sprintf.integers$, .specifier$) and sprintf.precision$ != ""
    .flag$ = replace$(.flag$, "0", "", 0)
  endif

  @trace: "  Argument:  |" +         .arg$       + "|"
  @trace: "  Flag:      |" +         .flag$      + "|"
  @trace: "  Width:     |" + string$(.width)     + "|" + " (" + sprintf.width$     + ")"
  @trace: "  Precision: |" + string$(.precision) + "|" + " (" + sprintf.precision$ + ")"
  @trace: "  Length:    |" +         .length$    + "|"
  @trace: "  Specifier: |" +         .specifier$ + "|"

  .pad$  = " " ; Character to use for padding

  # The string is constructed from the following parts
  .spad$ = "" ; Space padding
  .sig$  = "" ; Sign
  .hpad$ = "" ; Hash-padding
  .zpad$ = "" ; Zero-padding
  .int$  = "" ; Integer part
  .dec$  = "" ; Decimal part
  .exp$  = "" ; Exponent
  .str$  = "" ; String

  # Prepare numeric argument
  .arg = number(.arg$)
  if .arg != undefined
    if .arg < 0
      .sig$ = "-"
      .arg *= -1
    endif
  endif

  # For integer specifiers, precision specifies the minimum number of digits
  # to be written. The value is not truncated even if the result is longer.
  if index(sprintf.integers$, .specifier$)
    .arg = .arg div 1

    # A precision of 0 means that no character is written for the value 0.
    if !.precision and .arg == 0
      .str$ = ""
      .done = 1
    endif
  endif

  if !.done
    if .specifier$ == "s"
      # a string

      # For s, precision is the maximum number of characters to be printed
      if .precision == undefined
        .str$ = .arg$
      else
        .str$ = left$(.arg$, .precision)
      endif

    elsif index("boxX", .specifier$)
      # b  : an unsigned integer, in binary
      # o  : an unsigned integer, in octal
      # xX : an unsigned integer, in hexadecimal

      @dec2n: .arg div 1,
        ... if .specifier$ == "b" then  2 else
        ... if .specifier$ == "o" then  8 else
        ...                            16 fi fi
      .int$ = dec2n.n$

    elsif index("aA", .specifier$)
      # aA : an hexadecimal floating point

      @dec2n: .arg, 16
      .int$ = replace_regex$(dec2hex.n$, "\..*", "", 1)
      .dec$ = extractLine$(dec2hex.n$, ".")

    elsif index("eE", .specifier$)
      # a floating-point number, in scientific notation

      .exp  = floor(log10(.arg))
      .exp$ = string$(.exp)
      .exp$ = if length(.exp$) == 1 then "0" else "" fi + .exp$

      .exp$ = "e" + if .exp >= 0 then "+" else "-" fi + .exp$
      .num = .arg / (10 ** .exp)

      .int$ = string$(.num div 1)

    elsif index("diufF", .specifier$)
      # d  : a signed integer, in decimal
      # i  : a synonym for %d
      # u  : an unsigned integer, in decimal
      # fF : a floating-point number, in fixed decimal notation

      if index("fF", .specifier$)
        .int$ = string$(
          ...   number(if .precision != undefined then
          ...     fixed$(.arg, .precision) else string$(.arg) fi
          ...   ) div 1
          ... )

        # The fixed$() function _always_ returns at least one significant digit
        # When run on numbers like 0.01 with a precision of 1, it returns 0.01
        # If .int$ is zero, rounding might have suffered from this
        if .int$ == "0"
          .int$ = string$(
            ...   (number(if .precision != undefined then
            ...     fixed$(.arg + 1, .precision) else string$(.arg) fi
            ...   ) div 1) - 1
            ... )
        endif

        .num = .arg
      else
        # Rounding here does not do approximation, so we don't used fixed$()
        .int$ = replace_regex$(string$(.arg), "\..*", "", 1)
      endif

    elsif index("gG", .specifier$)
      # a floating-point number, in %e or %f notation

      .oldp = .precision
      .oldw = .width

      trace.level -= 1
      @_printf_replace: .flag$, undefined, undefined, .length$, "f", .arg$
      trace.level += 1

      .precision = .oldp
      .width     = .oldw

      if length(.int$) > .precision
        @_printf_replace: .flag$, .width, .precision - 1, .length$, "e", .arg$
      elsif length(.int$) + length(.dec$) > .precision
        .num$ = fixed$(number(.int$ + "." + .dec$), .precision - 1)
        .int$ = string$(number(.num$) div 1)
        .dec$ = string$(number(.num$) mod 1)
        .dec$ = if .dec$ == "0" then "" else .dec$ fi
      endif
      .str$ = ""

      .specifier$ = sprintf.specifier$

    else
      exitScript: "Unsupported format specifier: ", .specifier$
    endif
  endif

  if !index("s", .specifier$)
    if index(sprintf.doubles$, .specifier$)
      if .precision != undefined
        .dec$ = extractLine$(fixed$(.num, .precision), ".")
        .dec$ = left$(.dec$, .precision)
      else
        .dec$ = extractLine$(string$(.num), ".")
      endif
    endif

    @trace: "Integer:   >" + .int$  + "<"
    @trace: "Decimal:   >" + .dec$  + "<"
    @trace: "Exponent:  >" + .exp$  + "<"

    # Signage
    if index(sprintf.unsigned$, .specifier$)
      .sig$ = ""
    elsif .sig$ != "-"
      if index(.flag$, "+")
        .sig$ = "+"
      elsif index(.flag$, " ")
        .sig$ = " "
      endif
    endif

    @trace: "Sign:      >" + .sig$  + "<"

    # Padding

    # Hash padding
    if index(.flag$, "#") and .arg
      if index("xX", .specifier$)
        .hpad$ = "0x"
      elsif index("b", .specifier$)
        .hpad$ = "0b"
      elsif .specifier$ == "o"
        .hpad$ = "0"
      endif
    endif

    # Zero padding
    if index(sprintf.integers$, .specifier$)
      if .width != undefined
        if index(.flag$, "0") and !index(.flag$, "-")
          # Use zeros, not spaces, to right-justify with the 0 flag
          while length(.sig$ + .hpad$ + .zpad$ + .int$) < .width
            .zpad$ = .zpad$ + "0"
          endwhile
          .pad$ = "0"
        endif
      endif

      if .precision != undefined and sprintf.precision$ != ""
        # For integer conversions, specifying a precision implies that the
        # output of the number itself should be zero-padded to this width,
        # where the 0 flag is ignored:
        while length(.zpad$ + .int$) < .precision
          .zpad$ = .zpad$ + "0"
        endwhile
      endif
    endif

    if index(.flag$, "#") and index("o", .specifier$) and .zpad$ != ""
      .zpad$ = .zpad$ - "0"
    endif

    @trace: "Space pad: >" + .spad$ + "<"
    @trace: "Hash pad:  >" + .hpad$ + "<"
    @trace: "Zero pad:  >" + .zpad$ + "<"
  endif

  # Construct string from components
  if .str$ == ""
    .str$ = .sig$ + .hpad$ + .zpad$ + .int$
    if .dec$ != ""
      .str$ = .str$ + "." + .dec$
    endif

    .str$ = .str$ + .exp$
  endif

  @trace: "String: " + .str$

  # Pad with spaces
  if .width != undefined and .width > length(.str$)
    while length(.spad$) < .width
      .spad$ = .spad$ + .pad$
    endwhile

    if index(.flag$, "-")
      .return$ = left$( .str$  + .spad$, .width)
    else
      .return$ = right$(.spad$ +  .str$, .width)
    endif
  else
    .return$ = .str$
  endif

  if index_regex(.specifier$, "[A-Z]")
    @toUpper: .return$
    .return$ = toUpper.return$
  endif

  @trace: "Result: " + .return$
endproc
